{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gamer\\\\TaskManagerWeb\\\\Full-Stack-Task-Manager\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Dashboard from \"./components/Dashboard\";\nimport api from \"./api/axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      if (refreshToken && window.location.pathname !== \"/login\" && window.location.pathname !== \"/register\") {\n        try {\n          const res = await api.post(\"/auth/refresh\", {\n            refreshToken\n          });\n          localStorage.setItem(\"accessToken\", res.data.accessToken);\n          if (res.data.refreshToken) {\n            localStorage.setItem(\"refreshToken\", res.data.refreshToken);\n          }\n          console.log(\"NEW ACCESS TOKEN:\", res.data.accessToken);\n        } catch (err) {\n          console.log(\"Failed to refresh access token! Logging out…\", err);\n          localStorage.removeItem(\"accessToken\");\n          localStorage.removeItem(\"refreshToken\");\n          window.location.replace(\"/login\");\n        }\n      }\n    }, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/login\",\n      element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/register\",\n      element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/dashboard\",\n      element: localStorage.getItem(\"accessToken\") ? /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","Routes","Route","Navigate","Login","Register","Dashboard","api","jsxDEV","_jsxDEV","App","_s","interval","setInterval","refreshToken","localStorage","getItem","window","location","pathname","res","post","setItem","data","accessToken","console","log","err","removeItem","replace","clearInterval","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/Gamer/TaskManagerWeb/Full-Stack-Task-Manager/frontend/src/App.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Dashboard from \"./components/Dashboard\";\nimport api from \"./api/axios\";\n\nfunction App() {\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      if (\n        refreshToken &&\n        window.location.pathname !== \"/login\" &&\n        window.location.pathname !== \"/register\"\n      ) {\n        try {\n          const res = await api.post(\"/auth/refresh\", { refreshToken });\n          localStorage.setItem(\"accessToken\", res.data.accessToken);\n          if (res.data.refreshToken) {\n            localStorage.setItem(\"refreshToken\", res.data.refreshToken);\n          }\n          console.log(\"NEW ACCESS TOKEN:\", res.data.accessToken);\n        } catch (err) {\n          console.log(\"Failed to refresh access token! Logging out…\", err);\n          localStorage.removeItem(\"accessToken\");\n          localStorage.removeItem(\"refreshToken\");\n          window.location.replace(\"/login\");\n        }\n      }\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Routes>\n      <Route path=\"/login\" element={<Login />} />\n      <Route path=\"/register\" element={<Register />} />\n      <Route\n        path=\"/dashboard\"\n        element={\n          localStorage.getItem(\"accessToken\") ? (\n            <Dashboard />\n          ) : (\n            <Navigate to=\"/login\" />\n          )\n        }\n      />\n      <Route path=\"*\" element={<Navigate to=\"/login\" />} />\n    </Routes>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}